##
## Build a single slice, such as Debug x64, or Release x86.
## Optionally publishes the result as a pipeline artifact.
##
parameters:
  - name: DependsOn
    type: string
    default: ''

  - name: ShouldPublish
    type: boolean
    default: false

jobs:
- job: WindowsBuild
  displayName: Windows Build
  ${{ if ne(parameters.DependsOn, '') }}:
    dependsOn: ${{ parameters.DependsOn }}
  ${{ if ne(parameters.DependsOn, '') }}:
    condition: succeeded()
  timeoutInMinutes: 30
  cancelTimeoutInMinutes: 2
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      X64Debug:
        BuildConfiguration: Debug
        BuildPlatform: x64
      X64Release:
        BuildConfiguration: Release
        BuildPlatform: x64
      X86Debug:
        BuildConfiguration: Debug
        BuildPlatform: x86
      X86Release:
        BuildConfiguration: Release
        BuildPlatform: x86
  steps:
    - checkout: self
      clean: false
      submodules: false

    - script: choco install ninja
      displayName: Install Ninja

    - task: BatchScript@1
      displayName: Setup Visual C++ Environment
      inputs:
        filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
        arguments: $(BuildPlatform) $(BuildWindowsSDK)
        modifyEnvironment: true

    - task: CMake@1
      displayName: Generate Ninja scripts
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/$(BuildConfiguration)/$(BuildPlatform)
        cmakeArgs: -G Ninja -DCMAKE_BUILD_TYPE=$(BuildConfiguration) -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)\CMake\toolchain.windows.cmake $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: Build
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/$(BuildConfiguration)/$(BuildPlatform)
        cmakeArgs: --build .

    - task: CMake@1
      displayName: Stage built files
      inputs:
        workingDirectory: $(Pipeline.Workspace)
        cmakeArgs: --install $(Build.BinariesDirectory)/$(BuildConfiguration)/$(BuildPlatform) --prefix dist --component dist

    - script: ManifestTests
      displayName: Unit test - ManifestTests
      workingDirectory: $(Pipeline.Workspace)/dist/$(BuildConfiguration)/$(BuildPlatform)

    - task: PublishPipelineArtifact@1
      displayName: Publish build artifact
      condition: ${{ parameters.ShouldPublish }}
      inputs:
        path: $(Pipeline.Workspace)/dist
        artifactName: Windows-$(BuildConfiguration)-$(BuildPlatform)
